#!/bin/bash

# Initialize variables
scriptDir=${0%/*}
pyScriptName=$scriptDir/perform-ti
charmm="charmm"
numproc=1
PARFILES=()
topfile=
TOPFILES=()
mtptopfile=
mtptop=0
solute=
solvent=
lpun=
nsteps=20000
nequil=10000
remote=
SIMTYPES=("vdw" "pc" "mtp")
lambda_i=0.0
lambda_step=0.1
lambda_f=1.0
backward=
filenamedirection="f"

function show_help 
{
  echo -ne "Usage: \n$0 [-c charmm] [-n numProc] [-p file.par] <-t file.top>\n\
    [-q file.top] <-o solute.pdb> [-l solvent.pdb]\n\
    [-m file.lpun] [-g NSTEPS] [-e NEQUIL] [-r remote.cluster]\n\
    [-i lambda_i] [-d lambda_step] [-f lambda_f] [-b]\n\
    where:\n\
      -c:  CHARMM executable\n\
      -n:  number of cores per simulation\n\
      -p:  CHARMM parameter file(s) (one at a time)\n\
      -t:  CHARMM topology file\n\
      -q:  addtl. CHARMM topology file(s) (optional)\n\
      -a:  CHARMM topology file for MTP (replaces -t)\n\
      -o:  solute PDB file\n\
      -l:  solvent PDB file\n\
      -m:  MTP lpun file\n\
      -g:  total number of steps per TI run\n\
      -e:  number of equilibration steps per TI run\n\
      -r:  name of remote computer cluster\n\
      -i:  initial lambda value\n\
      -d:  lambda window spacing\n\
      -f:  final lambda value\n\
      -b:  backward simulation (will flip initial and final lambda values).\n"
}

function exists_or_die
{
  [ -z $1 ] && echo "Missing file $2" && exit 1
}

function contains() {
    local n=$#
    local value=${!n}
    for ((i=1;i < $#;i++)) {
        if [ "${!i}" == "${value}" ]; then
            echo "y"
            return 0
        fi
    }
    echo "n"
    return 1
}

OPTIND=1
while getopts "h?:c:n:p:t:q:o:l:m:g:e:r:i:d:f:b:a" opt; do
  case "$opt" in
    h|\?)
      show_help
      exit 0
      ;;
    c)
      charmm=$OPTARG
      echo "option charmm: $charmm"
      ;;
    n)
      numproc=$OPTARG
      [ $numproc -lt 1 ] && die "Error in number of CPUs"
      echo "option numproc: $numproc"
      ;;
    p)
      PARFILES+=("--par $OPTARG")
      echo "option PARFILES: ${PARFILES[@]}"
      ;;
    t)
      topfile=$OPTARG
      echo "option topfile: $topfile"
      ;;
    q)
      TOPFILES+=("--top $OPTARG")
      echo "option TOPFILES: ${TOPFILES[@]}"
      ;;
    a)
      mtptopfile=$OPTARG
      mtptop=1
      echo "option topfile for MTP: $mtptopfile"
      ;;
    o)
      solute=$OPTARG
      echo "option solute: $solute"
      ;;
    l)
      solvent="--slv $OPTARG"
      echo "option solvent: $solvent"
      ;;
    m)
      lpun="--lpun $OPTARG"
      echo "option lpun: $lpun"
      ;;
    g)
      nsteps=$OPTARG
      echo "option nsteps: $nsteps"
      ;;
    e)
      nequil=$OPTARG
      echo "option nequil: $nequil"
      ;;
    r)
      remote="--rem $OPTARG"
      echo "option remote: $remote"
      ;;
    i)
      lambda_i=$OPTARG
      echo "option lambda_i: $lambda_i"
      ;;
    d)
      lambda_step=$OPTARG
      echo "option lambda_step: $lambda_step"
      ;;
    f)
      lambda_f=$OPTARG
      echo "option lambda_f: $lambda_f"
      ;;
    b)
      backward="--back"
      filenamedirection="b"
      echo "option backward simulation turned on"
      ;;
  esac
done
shift $((OPTIND-1)) # Shift off the options

exists_or_die $topfile "topfile"
exists_or_die $solute "solute"
exists_or_die $lpun "lpun"


for simtype in ${SIMTYPES[@]}
do
  filename=ti.$simtype.$filenamedirection.$nsteps.$lambda_step.out
  echo "Running $simtype; saving output to $filename"
  topfileuse=$topfile
  [ $topfile == "1" ] && topfileuse=$mtptopfile
  # Submit jobs
  $pyScriptName \
    --chm $charmm \
    --tps $topfileuse \
    ${TOPFILES[@]} \
    ${PARFILES[@]} \
    --ti $simtype \
    --slu $solute \
    $solvent \
    $lpun \
    --nst $nsteps \
    --neq $nequil \
    $remote \
    --lmb $lambda_i $lambda_step $lambda_f \
    --num $numproc \
    $backward > $filename
done

