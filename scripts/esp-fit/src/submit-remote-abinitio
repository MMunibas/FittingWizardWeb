#!/usr/bin/env bash
#
# Submit ab initio calculations to remote cluster. 
# Then copy the results back.
#
# Tristan BEREAU (2013)

###############################################
# Directory of the esp-fit.pc-mtp package
# Resolves sym links.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    # if    #$SOURCE was a relative symlink, we need to resolve it relative to
    #the path where the symlink file was located
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" 
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
################################################

[ ! -f $DIR/cfg_parser.sh ] && \
  echo "Can't find cfg_parser.sh" && exit 1
source $DIR/cfg_parser.sh 
cfg_parser $DIR/config.ini
cfg.section.remote

# Initialize variables
xyz=
mtpOrder=0
netCharge=0
multiplicity=1
gaussParams="#P MP2 6-31G** nosymm"
gridStep=0.1
numCores=1

function show_help
{
  echo -ne "Usage: \n$0 [OPTIONS] -i file.xyz\n\
    OPTIONS:\n\
      -m ARG:  MTP order (default: $mtpOrder)\n\
      -c ARG:  net charge (default: $netCharge)\n\
      -s ARG:  multiplicity (default: $multiplicity)\n\
      -p ARG:  Gaussian parameters (default: $gaussParams)\n\
      -g ARG:  grid step size (default: $gridStep)\n\
      -n ARG:  number of cores (default: $numCores)\n"
}

OPTIND=1
while getopts "h?:i:m:c:s:p:g:n:" opt; do
  case "$opt" in
    h|\?)
      show_help
      exit 0
      ;;
    i)
      xyz="$OPTARG"
      echo "Selected XYZ file: $xyz"
      ;;
    m)
      mtpOrder="$OPTARG"
      echo "Selected MTP order: $mtpOrder"
      ;;
    c)
      netCharge="$OPTARG"
      echo "Selected net charge: $netCharge"
      ;;
    s)
      multiplicity="$OPTARG"
      echo "Selected multiplicity: $multiplicity"
      ;;
    p)
      gaussParams="$OPTARG"
      echo "Selected Gaussian options: $gaussParams"
      ;;
    g)
      gridStep="$OPTARG"
      echo "Selected grid step size: $gridStep"
      ;;
    n)
      numCores="$OPTARG"
      echo "Selected number of cores: $numCores"
      ;;
  esac
done

[ -z $xyz ] && echo "Error: Missing xyz file" && exit 1
[ ! -f $xyz ] && echo "Error: Can't find xyz file" && exit 1

# ** Connect to remote cluster **
#
# Test connection
echo "Establishing connection"
sshaddress=${user}@${hostname}
ssh $sshaddress "hostname" >/dev/null
[ $? -ne 0 ] && \
  echo "Error. Cannot connect to remote computer $hostname" \
  && exit 1
# Create directory for calculations
existing_dirs=`ssh $sshaddress "ls $workdir"`
dir_index=0
dir_name=`printf "dir%03d\n" $index_trial`
max_index=999
while [[ $existing_dirs =~ $dir_name ]]; do
    let dir_index+=1
    dir_name=`printf "dir%03d\n" $dir_index`
    [ $dir_index -ge $max_index ] && \
        echo "Error. No free directory in remote cluster." && exit 1
done
ssh $sshaddress "mkdir -p $workdir/$dir_name"
echo "Copying files to remote computer"
# Copy both xyz file and calc_Multipole_Gauss_MEP_comp.py
scp $xyz $DIR/calc_Multipole_Gauss_MEP_comp.py \
  $sshaddress:$workdir/$dir_name
echo "Running script remotely in $hostname:$workdir/$dir_name"
echo "Please wait..."
ssh $sshaddress "cd $workdir/$dir_name; \
python calc_Multipole_Gauss_MEP_comp.py -zxy $xyz \
-mtp_order $mtpOrder -stpsz $gridStep -charge $netCharge \
-state $multiplicity -Gauss \"$gaussParams\" -n $numCores \
-formchk $formchk -cubegen $cubegen -gdma $gdma \
-fieldcomp $fieldcomp -gdma_local $gdma_local -gauss_ext $gauss_ext"
# After this point, the script has ended. Copy back the results
echo "Copying back remote data and delete remote directory"
rsync -az $sshaddress:$workdir/$dir_name/* . 2>/dev/null
ssh $sshaddress "rm -rf $workdir/$dir_name"







